///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем мНастройки;
Перем Лог;
Перем мИдентификаторКластера;
Перем мИдентификаторБазы;
Перем ЭтоWindows;

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ТекстОписанияКоманды = Неопределено;
	ТекстОписанияКоманды = "     Удалить информационную базу.";
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписанияКоманды);
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ras", "Сетевой адрес RAS, по умолчанию localhost:1545");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--rac", "Команда запуска RAC, по умолчанию находим в каталоге установки 1с");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--name", "Имя информационной базы(Обязательный)");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster-admin", "Администратор кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster-pwd", "Пароль администратора кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster", "Идентификатор кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster-name", "Имя кластера");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--drop-database", "При удалении ИБ удалить БД(true/false)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--clear-database", "При удалении ИБ очистить БД(true/false)");
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры

Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Попытка
		Лог = ДополнительныеПараметры.Лог;
	Исключение
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецПопытки;
	
	ПрочитатьПараметры(ПараметрыКоманды);
	
	Если Не ПараметрыВведеныКорректно() Тогда
		Возврат МенеджерКомандПриложения.РезультатыКоманд().НеверныеПараметры;
	КонецЕсли;
	УдалитьИнформационнуюБазу();
	
	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
	
КонецФункции

Процедура ПрочитатьПараметры(Знач ПараметрыКоманды)
	
	мНастройки = Новый Структура;
	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];
	
	Для Каждого КЗ Из ПараметрыКоманды Цикл
		Лог.Отладка(КЗ.Ключ + " = " + КЗ.Значение);
	КонецЦикла;
	
	мНастройки.Вставить("АдресСервераАдминистрирования", ОбщиеМетоды.Параметр(ПараметрыКоманды, "--ras", "localhost:1545"));
	мНастройки.Вставить("ПутьКлиентаАдминистрирования", ПараметрыКоманды["--rac"]);
	мНастройки.Вставить("АдминистраторИБ", ДанныеПодключения.Пользователь);
	мНастройки.Вставить("ПарольАдминистратораИБ", ДанныеПодключения.Пароль);
	мНастройки.Вставить("АдминистраторКластера", ПараметрыКоманды["--cluster-admin"]);
	мНастройки.Вставить("ПарольАдминистратораКластера", ПараметрыКоманды["--cluster-pwd"]);
	мНастройки.Вставить("ИдентификаторКластера", ПараметрыКоманды["--cluster"]);
	мНастройки.Вставить("ИмяКластера", ПараметрыКоманды["--cluster-name"]);
	мНастройки.Вставить("ИспользуемаяВерсияПлатформы", ПараметрыКоманды["--v8version"]);
	
	мНастройки.Вставить("УдалитьБД", ПараметрыКоманды["--drop-database"]);
	мНастройки.Вставить("ОчиститьБД", ПараметрыКоманды["--clear-database"]);
	мНастройки.Вставить("ИмяИБ", ПараметрыКоманды["--name"]);
	
	// Получим путь к платформе если вдруг не установленна
	мНастройки.ПутьКлиентаАдминистрирования = ПолучитьПутьКRAC(мНастройки.ПутьКлиентаАдминистрирования, мНастройки.ИспользуемаяВерсияПлатформы);
	
КонецПроцедуры

Функция ПараметрыВведеныКорректно()
	
	Успех = Истина;
	
	Если Не ЗначениеЗаполнено(мНастройки.АдресСервераАдминистрирования) Тогда
		Лог.Ошибка("Не указан сервер администрирования");
		Успех = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мНастройки.ПутьКлиентаАдминистрирования) Тогда
		Лог.Ошибка("Не указан клиент администрирования");
		Успех = Ложь;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(мНастройки.ИмяИБ) Тогда
		Лог.Ошибка("Не указано имя удаляемой ИБ");
		Успех = Ложь;
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Взаимодействие с кластером

Процедура УдалитьИнформационнуюБазу()
	ИдентификаторКластера = ИдентификаторКластера();
	ИдентификаторБазы = ИдентификаторБазы();
	КомандаВыполнения = СтрокаЗапускаКлиента() + "infobase drop ";
	
	Если ЗначениеЗаполнено(ИдентификаторБазы) Тогда
		Командавыполнения = КомандаВыполнения + "--infobase=""" + ИдентификаторБазы + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(мНастройки.УдалитьБД) И мНастройки.УдалитьБД Тогда
		КомандаВыполнения = КомандаВыполнения + "--drop-database ";
	КонецЕсли;
	Если ЗначениеЗаполнено(мНастройки.ОчиститьБД) И мНастройки.ОчиститьБД Тогда
		КомандаВыполнения = КомандаВыполнения + "--clear-database ";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(мНастройки.ИдентификаторКластера) Тогда
		КомандаВыполнения = КомандаВыполнения + "--cluster=""" + ИдентификаторКластера + """ ";
	КонецЕсли;
	КомандаВыполнения = КомандаВыполнения + КлючиАвторизацииВКластере();
	КомандаВыполнения = КомандаВыполнения + КлючиАвторизацииВБазе();
	КомандаВыполнения = КомандаВыполнения + " " + мНастройки.АдресСервераАдминистрирования;
	Лог.Отладка(КомандаВыполнения);
	 ЗапуститьПроцесс(КомандаВыполнения);
	
	Лог.Информация(СтрШаблон("База удалена: Имя ИБ:%1", мНастройки.ИмяИБ));
КонецПроцедуры

Функция КлючиАвторизацииВБазе()
	КлючиАвторизацииВБазе = "";
	Если ЗначениеЗаполнено(мНастройки.АдминистраторИБ) Тогда
		КлючиАвторизацииВБазе = КлючиАвторизацииВБазе + СтрШаблон(" --infobase-user=""%1""", мНастройки.АдминистраторИБ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мНастройки.ПарольАдминистратораИБ) Тогда
		КлючиАвторизацииВБазе = КлючиАвторизацииВБазе + СтрШаблон(" --infobase-pwd=""%1""", мНастройки.ПарольАдминистратораИБ);
	КонецЕсли;
	
	Возврат КлючиАвторизацииВБазе;
	
КонецФункции

Функция ИдентификаторКластера()
	
	Если мИдентификаторКластера = Неопределено Тогда
		
		Лог.Информация("Получаю список кластеров");
		
		КомандаВыполнения = СтрокаЗапускаКлиента() + "cluster list" + " " + мНастройки.АдресСервераАдминистрирования;
		
		СписокКластеров = ЗапуститьПроцесс(КомандаВыполнения);
		
		МассивКластеров = Новый Массив;
		СтруктураКластера = Новый Структура;
		
		МассивСтрок = СтрРазделить(СписокКластеров, Символы.ПС);
		Для Каждого Стр Из МассивСтрок Цикл
			Если СтрНачинаетсяС(Стр, "cluster") Тогда
				СтруктураКластера.Вставить("УИДКластера", СокрЛП(Сред(Стр, (СтрНайти(Стр, ": ") + 2), СтрДлина(Стр))));
			КонецЕсли;
			Если СтрНачинаетсяС(Стр, "name") Тогда
				СтруктураКластера.Вставить("ИмяКластера", СокрЛП(Сред(Стр, (СтрНайти(Стр, ": ") + 2), СтрДлина(Стр))));
				
				МассивКластеров.Добавить(СтруктураКластера);
				СтруктураКластера = Новый Структура;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(мНастройки.ИдентификаторКластера) Тогда
			Для Каждого ОписаниеКластера Из МассивКластеров Цикл
				Если ОписаниеКластера.УИДКластера = мНастройки.ИдентификаторКластера Тогда
					УИДКластера = ОписаниеКластера.УИДКластера;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ПустаяСтрока(мНастройки.ИмяКластера) Тогда
			Для Каждого ОписаниеКластера Из МассивКластеров Цикл
				Если ОписаниеКластера.ИмяКластера = """" + мНастройки.ИмяКластера + """" Тогда
					УИДКластера = ОписаниеКластера.УИДКластера;
				КонецЕсли;
			КонецЦикла;
		Иначе
			УИДКластера = Сред(СписокКластеров, (Найти(СписокКластеров, ":") + 1), Найти(СписокКластеров, "host") - Найти(СписокКластеров, ":") - 1);
		КонецЕсли;
		
		мИдентификаторКластера = СокрЛП(СтрЗаменить(УИДКластера, Символы.ПС, ""));
		
	КонецЕсли;
	
	Если ПустаяСтрока(мИдентификаторКластера) Тогда
		ВызватьИсключение "Кластер серверов отсутствует";
	КонецЕсли;
	
	Возврат мИдентификаторКластера;
	
КонецФункции

Функция ИдентификаторБазы()
	Если мИдентификаторБазы = Неопределено Тогда
		мИдентификаторБазы = НайтиБазуВКластере();
	КонецЕсли;
	
	Возврат мИдентификаторБазы;
КонецФункции

Функция НайтиБазуВКластере()
	
	КомандаВыполнения = СтрокаЗапускаКлиента() + СтрШаблон("infobase summary list --cluster=""%1""%2",
			ИдентификаторКластера(),
			КлючиАвторизацииВКластере()) + " " + мНастройки.АдресСервераАдминистрирования;
	
	Лог.Информация("Получаю список баз кластера");
	
	СписокБазВКластере = СокрЛП(ЗапуститьПроцесс(КомандаВыполнения));
	Лог.Отладка(СписокБазВКластере);
	ЧислоСтрок = СтрЧислоСтрок(СписокБазВКластере);
	НайденаБазаВКластере = Ложь;
	Для К = 1 По ЧислоСтрок Цикл
		
		СтрокаРазбора = СтрПолучитьСтроку(СписокБазВКластере, К);
		ПозицияРазделителя = Найти(СтрокаРазбора, ":");
		Если Найти(СтрокаРазбора, "infobase") > 0 Тогда
			УИДИБ = СокрЛП(Сред(СтрокаРазбора, ПозицияРазделителя + 1));
		ИначеЕсли Найти(СтрокаРазбора, "name") > 0 Тогда
			ИмяБазы = СокрЛП(Сред(СтрокаРазбора, ПозицияРазделителя + 1));
			Если Нрег(ИмяБазы) = НРег(мНастройки.ИмяИБ) Тогда
				Лог.Информация("Получен УИД базы");
				НайденаБазаВКластере = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если Не НайденаБазаВКластере Тогда
		ВызватьИсключение "База " + мНастройки.ИмяИБ + " не найдена в кластере";
	КонецЕсли;
	
	Возврат УИДИБ;
	
КонецФункции

Функция КлючиАвторизацииВКластере()
	КомандаВыполнения = "";
	Если ЗначениеЗаполнено(мНастройки.АдминистраторКластера) Тогда
		КомандаВыполнения = КомандаВыполнения + СтрШаблон(" --cluster-user=""%1"" ", мНастройки.АдминистраторКластера);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мНастройки.ПарольАдминистратораКластера) Тогда
		КомандаВыполнения = КомандаВыполнения + СтрШаблон(" --cluster-pwd=""%1"" ", мНастройки.ПарольАдминистратораКластера);
	КонецЕсли;
	Возврат КомандаВыполнения;
КонецФункции

Функция СтрокаЗапускаКлиента()
	Перем ПутьКлиентаАдминистрирования;
	Если ЭтоWindows Тогда
		ПутьКлиентаАдминистрирования = ОбщиеМетоды.ОбернутьПутьВКавычки(мНастройки.ПутьКлиентаАдминистрирования);
	Иначе
		ПутьКлиентаАдминистрирования = мНастройки.ПутьКлиентаАдминистрирования;
	КонецЕсли;
	
	Возврат ПутьКлиентаАдминистрирования + " ";
	
КонецФункции


Функция ЗапуститьПроцесс(Знач СтрокаВыполнения)
	
	Возврат ОбщиеМетоды.ЗапуститьПроцесс(СтрокаВыполнения);
	
	
КонецФункции

Функция РазобратьПоток(Знач Поток) Экспорт
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Поток);
	
	СписокОбъектов = Новый Массив;
	ТекущийОбъект = Неопределено;
	
	Для Сч = 1 По ТД.КоличествоСтрок() Цикл
		
		Текст = ТД.ПолучитьСтроку(Сч);
		Если ПустаяСтрока(Текст) ИЛИ ТекущийОбъект = Неопределено Тогда
			Если ТекущийОбъект <> Неопределено И ТекущийОбъект.Количество() = 0 Тогда
				Продолжить; // очередная пустая строка подряд
			КонецЕсли;
			
			ТекущийОбъект = Новый Соответствие;
			СписокОбъектов.Добавить(ТекущийОбъект);
		КонецЕсли;
		
		СтрокаРазбораИмя = "";
		СтрокаРазбораЗначение = "";
		
		Если РазобратьНаКлючИЗначение(Текст, СтрокаРазбораИмя, СтрокаРазбораЗначение) Тогда
			ТекущийОбъект[СтрокаРазбораИмя] = СтрокаРазбораЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийОбъект <> Неопределено И ТекущийОбъект.Количество() = 0 Тогда
		СписокОбъектов.Удалить(СписокОбъектов.ВГраница());
	КонецЕсли;
	
	Возврат СписокОбъектов;
	
КонецФункции

Функция ПолучитьПутьКRAC(ТекущийПуть, Знач ВерсияПлатформы = "")
	
	Если НЕ ПустаяСтрока(ТекущийПуть) Тогда
		ФайлУтилиты = Новый Файл(ТекущийПуть);
		Если ФайлУтилиты.Существует() Тогда
			Лог.Отладка("Текущая версия rac " + ФайлУтилиты.ПолноеИмя);
			Возврат ФайлУтилиты.ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ВерсияПлатформы) Тогда
		ВерсияПлатформы = "8.3";
	КонецЕсли;
	
	Конфигуратор = Новый УправлениеКонфигуратором;
	ПутьКПлатформе = Конфигуратор.ПолучитьПутьКВерсииПлатформы(ВерсияПлатформы);
	Лог.Отладка("Используемый путь для поиска rac " + ПутьКПлатформе);
	КаталогУстановки = Новый Файл(ПутьКПлатформе);
	Лог.Отладка(КаталогУстановки.Путь);
	
	
	ИмяФайла = ?(ЭтоWindows, "rac.exe", "rac");
	
	ФайлУтилиты = Новый Файл(ОбъединитьПути(Строка(КаталогУстановки.Путь), ИмяФайла));
	Если ФайлУтилиты.Существует() Тогда
		Лог.Отладка("Текущая версия rac " + ФайлУтилиты.ПолноеИмя);
		Возврат ФайлУтилиты.ПолноеИмя;
	КонецЕсли;
	
	Возврат ТекущийПуть;
	
КонецФункции

Функция РазобратьНаКлючИЗначение(Знач СтрокаРазбора, Ключ, Значение)
	
	ПозицияРазделителя = Найти(СтрокаРазбора, ":");
	Если ПозицияРазделителя = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ключ = СокрЛП(Лев(СтрокаРазбора, ПозицияРазделителя - 1));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияРазделителя + 1));
	
	Возврат Истина;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;